snippet date
	DATE="$(date +%Y%m%d_%Y%M%S)"
snippet usage
	PROGRAM_NAME=$$1{0##*/}
	usage ()
	{
		echo
		echo "Usage: $PROGRAM_NAME ${2:[OPTION]}"
		echo "${3:# explaination}"
		echo
	}
snippet fn
	`Filename()`
snippet pid
	PID=$$
snippet root
	if [ ${EUID} -eq 0 ] ; then
	  echo "you are root"
	fi
snippet f?
	if [ -f "$${1:FILE}" ]; then
	    #${2: do things}
	fi
snippet argcheck
	[ -z "$${1:ARG1}" ] &&  echo "$1 empty" &&  ERROR=true
	[ -z "$${2:ARG2}" ] &&  echo "$2 empty" &&  ERROR=true
	[ -z "$${3:ARG3}" ] &&  echo "$3 empty" &&  ERROR=true
	${ERROR} && exit 1
	${4}
snippet eal each line: while loop with STDIN redirection
	while read line
	do
	    ${2:echo "### $line"}
	
	done < ${1:IN_FILE}
snippet eal each line: for loop using $IFS
	# save Original IFS
	IFS=$IFS
	
	# set IFS as '\n'
	IFS="
	"
	
	for line in $(${1:cat /etc/hosts | grep -v ^#})
	do
	    ${2:echo $line}
	done
	
	# restore IFS to Original
	IFS=$IFS
	${3}
snippet getopt
	# a: means option a is expected to have an argment
	while getopts "ab:c:" OPT
	do
	    case $OPT in
	        "a" ) OPT_A="TRUE" ;;
	        "b" ) OPT_B="TRUE" ; VAL_B="$OPTARG" ;;
	        "c" ) OPT_C="TRUE" ; VAL_C="$OPTARG" ;;
	    esac
	done
	shift  $(($OPTIND - 1)) # skip parameters already processed as option

	echo "OPT_A=${OPT_A:-FALSE}"
	echo "OPT_B=${OPT_B:-FALSE} VAL_B=${VAL_B}"
	echo "OPT_C=${OPT_C:-FALSE} VAL_C=${VAL_C}"
	echo
	echo "ARGS = $@"
snippet suc?
	RESULT=$?
	if [ $RESULT -ne 0 ];then
		echo "FAIL"
		exit 1
	fi
	echo "SUCCESS"
snippet found?
	CMD="cat /etc/hosts"
	KEYWORD="HOGE"
	$CMD | fgrep -q ${KEYWORD} ; RESULT=$?
snippet trap "simple command"
	trap "echo 'pushed Ctrl+C'; exit 1" INT
	
	while true
	do
		sleep 60
	done

snippet trap "signal handler"
	function signal_handler {
		echo
		echo "catch signal!"
		exit 1
	}
	trap 'signal_handler' INT TERM
	
	while true
	do
		sleep 60
	done
	
snippet hdoc
	VAR="1000"
	cat << EOS
	This is 
	Here
	Document
	$VAR is interporated!
	use single quote('EOS') to avoid.
	EOS
snippet ary
	ary[0]="zero"
	ary[1]="one"
	ary[2]="two"
	echo ${ary[@]}
	echo ${#ary[@]}
	echo ==
	ary=(1 2 3 4)   # initialize
	echo ${ary[@]}  # all value
	echo ${#ary[@]} # num of element
	
	for v in ${ary[@]} # process each element
	do
		echo $v
	done
snippet f
	function ${1:name}()
	{
		${2:# code here}
	}
snippet pn
	PROGRAM_NAME=$$1{0##*/}
snippet inc
	((++${1:i}))${2}
snippet arc
	ARCH=$(uname -m)
snippet e
	exit
	
snippet ca
	case word in
	pattern)
	    # command
	    ;;
	*)
	    echo "error"
	    ;;
	esac${1}
snippet fo
	for ${1:var} in ${2:list}
	do
		${3:# command}
	done${4}
snippet ec
	echo "${1:message}"
	${2}
	
